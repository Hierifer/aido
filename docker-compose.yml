services:
  # Web 应用服务
  gateway:
    image: nginx:alpine  # 使用官方 Nginx 镜像
    ports:
      - "81:80"  # 端口映射：宿主机 81 → 容器 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # 挂载配置文件
    networks:
      - CORE-NETWORK  # 使用 CORENETWORK 网络
    depends_on:
      - web
      - biz
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  web:
    build: 
      context: ./web  # 使用 web 目录下的 Dockerfile 构建镜像
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # 端口映射：宿主机 8080 → 容器 8080
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - CORE-NETWORK  # 使用 CORENETWORK 网络
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s


  # 应用服务
  biz:
    build: 
      context: ./biz  # 使用 biz 目录下的 Dockerfile 构建镜像
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # 端口映射：宿主机 3000 → 容器 3000
    environment:
      - DB_HOST=db  # 环境变量配置
      - DB_USER=admin
      - DB_PASSWORD=123123123
    networks:
      - CORE-NETWORK  # 使用 CORENETWORK 网络
    depends_on:
      - db  # 先启动 db 服务
      - redis
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ping || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 数据库服务
  db:
    image: mysql:8.0  # 使用官方 MySQL 镜像
    volumes:
      - db-data:/var/lib/mysql  # 持久化数据卷
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=mydb
    networks:
      - CORE-NETWORK  # 使用 CORENETWORK 网络
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mydatabase"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  redis:
    image: redis:alpine  # 使用官方 Redis 镜像
    networks:
      - CORE-NETWORK  # 使用 CORENETWORK 网络

volumes:
  db-data:  # 定义数据卷

networks:
  CORE-NETWORK:  # 定义网络

